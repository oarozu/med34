<?php

namespace Admin\UnadBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DocenteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocenteRepository extends EntityRepository
{
    public function docentesPeriodo($periodo)
    {
        $connection = $this->getEntityManager()->getConnection();
        $q = "select doc.* from (select @periodoe_id:=" . $periodo . " p) param, docentes_periodo doc";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAll();
    }

    public function totalEscuelas($periodo)
    {
        $connection = $this->getEntityManager()->getConnection();
        $q = "select docente.escuela_id, escuela.nombre, escuela.sigla,
            count(case when vinculacion = 'DC' THEN 1 end) vdc,
            count(case when vinculacion = 'DOFE' THEN 1 end) vdofe,
            count(case when vinculacion = 'DO' THEN 1  end) vdo,
            count(case when vinculacion = 'HC' then 1 end) vhc,
            count(*) total
            from docente
            join escuela on docente.escuela_id = escuela.id
            where periodo = " . $periodo . "
            group by docente.escuela_id";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAllAssociative();
    }

    public function porSemestres($user, $tipo)
    {
        $connection = $this->getEntityManager()->getConnection();
        $q = "SELECT d.id, d.vinculacion, p.year, p.observaciones FROM docente d
              JOIN periodoe p ON d.periodo = p.id
              WHERE p.type = " . $tipo . " AND d.user_id = " . $user . "
              ORDER BY d.id DESC LIMIT 10";
        $stmt = $connection->executeQuery($q);
        return $stmt->fetchAllAssociative();
    }

    public function selecionarLider($escuela)
    {
        #$connection = $this->getEntityManager()->getConnection();
        #$q = "SELECT d.* FROM docente d
        #      WHERE d.escuela_id = " . $escuela . " AND d.vinculacion != 'HC'
        #      ORDER BY d.id DESC LIMIT 750";
        #$stmt = $connection->executeQuery($q);
        #return $stmt->fetchAllAssociative();

        return $this->createQueryBuilder('docente')
            ->where('docente.escuela = :escuela')
           # ->where('docente.vinculacion != "HC"')
            ->setParameter('escuela', $escuela)
            ->orderBy('docente.id', 'DESC')
            ->setMaxResults(750);
    }


    public function evalAnual($year, $docente)
    {
        $connection = $this->getEntityManager()->getConnection();
        $query = "SELECT do.id, pe.year, pe.observaciones as periodo, e.hetero, e.co, e.auto
            FROM docente do
            JOIN periodoe pe ON do.periodo = pe.id
            JOIN evaluacion e ON do.id = e.id
            WHERE pe.year ='$year' AND do.user_id = '$docente'";
        $result = $connection->executeQuery($query);
        return $result->fetchAllAssociative();
    }


    public function porVinculacion($sigla, $periodo)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT a FROM AdminUnadBundle:Docente a WHERE a.vinculacion = :sigla and a.periodo = :periodo')->setParameter('sigla', $sigla)->setParameter('periodo', $periodo);
        $programas = $query->getResult();
        return $programas;
    }

    public function resultadosEscuelaPeriodo($escuela, $periodo)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT d.id, u.id AS cedula, u.nombres, u.apellidos, d.vinculacion, c.nombre AS centro, p.id AS programa, e.hetero, e.co, e.auto, e.final
        FROM AdminUnadBundle:Docente d  
        JOIN d.user u
        JOIN d.centro c
        JOIN d.programa p
        JOIN d.evaluacion e
        WHERE d.periodo = :periodo AND d.escuela = :escuela')->setParameter('escuela', $escuela)->setParameter('periodo', $periodo);

        $docentes = $query->getResult();
        return $docentes;
    }
}
